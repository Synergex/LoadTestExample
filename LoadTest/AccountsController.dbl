;;*****************************************************************************
;;
;; Title:       AccountsController.dbl
;;
;; Description: OData controller for the Accounts structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Newtonsoft.Json
import LoadTest.Models

namespace LoadTest.Controllers

	;;; <summary>
	;;; OData controller for Accounts
	;;; </summary>
	public partial class AccountsController extends ODataController
    
		public readwrite property DBContext, @LoadTest.Models.DBContext
		public readwrite property ServiceProvider, @IServiceProvider

		;;; <summary>
		;;; Constructs a new instance of AccountsController
		;;; </summary>
		;;; <param name="aDbContext">Database context instance (DI)</param>
		;;; <param name="aServiceProvider">Service provider instance (DI)</param>
		public method AccountsController
			aDbContext, @LoadTest.Models.DBContext
			aServiceProvider, @IServiceProvider
		proc
			this.DBContext = aDbContext
			this.ServiceProvider = aServiceProvider
		endmethod

		{ODataRoute("Accounts")}
		{EnableQuery(MaxExpansionDepth=4)}
		;;; <summary>
		;;; Get all Accounts
		;;; </summary>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetAccounts, @IActionResult
		proc
			mreturn Ok(DBContext.Accounts.AsNoTracking())
		endmethod

		{ODataRoute("Accounts(AccountNumber={aAccountNumber})")}
		{EnableQuery(MaxExpansionDepth=4)}
		;;; <summary>
		;;; Get a single Account by primary key.
		;;; </summary>
		;;; <param name="aAccountNumber">Account number</param>
		;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
		public method GetAccount, @SingleResult<Account>
			{FromODataUri}
			required in aAccountNumber, int
		proc
			mreturn new SingleResult<Account>(DBContext.Accounts.AsNoTracking().FindQuery<Account>(DBContext, aAccountNumber))
		endmethod

		{ODataRoute("Accounts(AccountNumber={aAccountNumber})")}
		;;; <summary>
		;;; Create (with a client-supplied primary key) or replace a Account.
		;;; </summary>
		;;; <param name="aAccountNumber">Account number</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method PutAccount, @IActionResult
			{FromODataUri}
			required in aAccountNumber, int
			{FromBody}
			required in aAccount, @Account
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Ensure that the key values in the URI win over any data that may be in the model object
			aAccount.AccountNumber = aAccountNumber

			try
			begin
				;;Add and commit
				data existing = DBContext.Accounts.Find(aAccountNumber)
				if(existing == ^null) then
				begin
					DBContext.Accounts.Add(aAccount)
					DBContext.SaveChanges()
					mreturn Created(aAccount)
				end
				else
				begin
					aAccount.CopyTo(existing)
					DBContext.SaveChanges()
					mreturn NoContent()
				end
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

		endmethod

		{ODataRoute("Accounts(AccountNumber={aAccountNumber})")}
		;;; <summary>
		;;; Patch  (partial update) a Account.
		;;; </summary>
		;;; <param name="aAccountNumber">Account number</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method PatchAccount, @IActionResult
			{FromODataUri}
			required in aAccountNumber, int
			{FromBody}
			required in aAccount, @JsonPatchDocument<Account>
		proc
			;; Validate inbound data
			if (!ModelState.IsValid)
				mreturn BadRequest(ModelState)

			;;Patch the existing Account
			try
			begin
				;;Get the Account to be updated
				data AccountToUpdate = DBContext.Accounts.Find(aAccountNumber)
				data patchError, @JsonPatchError, ^null
				;;Did we find it?
				if(AccountToUpdate == ^null)
					mreturn NotFound()

				;;Apply the changes to the Account we read
				aAccount.ApplyTo(AccountToUpdate, lambda(error) { patchError = error })
				;;if the patchdoc was bad return the error info
				if(patchError != ^null)
					mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

				;;Update and commit
				DBContext.Accounts.Update(AccountToUpdate)
				DBContext.SaveChanges()
			end
			catch (e, @InvalidOperationException)
			begin
				mreturn BadRequest(e)
			end
			endtry

			mreturn NoContent()

		endmethod

		{ODataRoute("Accounts(AccountNumber={aAccountNumber})")}
		;;; <summary>
		;;; Delete a Account.
		;;; </summary>
		;;; <param name="aAccountNumber">Account number</param>
		;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
		public method DeleteAccount, @IActionResult
			{FromODataUri}
			required in aAccountNumber, int
		proc
			;;Get the Account to be deleted
			data AccountToRemove = DBContext.Accounts.Find(aAccountNumber)

			;;Did we find it?
			if (AccountToRemove == ^null)
				mreturn NotFound()

			;;Delete and commit
			DBContext.Accounts.Remove(AccountToRemove)
			DBContext.SaveChanges()

			mreturn NoContent()

		endmethod

		{ODataRoute("Accounts/Transfer")}
		public method Transfer, @IActionResult
			{FromBody}
			parameters, @ODataActionParameters
		proc
			data sourceId = parameters["Source"]
			data targetId = parameters["Target"]
			data amount = (decimal)parameters["Amount"]

			data source = DBContext.Accounts.Find(sourceId)
			data target = DBContext.Accounts.Find(targetId)

			do forever
			begin
				try
				begin
					source.Balance -= amount
					target.Balance += amount
					if(source.Balance > 0) then
					begin
						DBContext.SaveChanges()
						mreturn Ok()
					end
					else
					begin
						mreturn UnprocessableEntity()
					end
				end
				catch(ex, @DbUpdateConcurrencyException)
				begin
					DBContext.Entry(source).State = EntityState.Detached
					DBContext.Entry(target).State = EntityState.Detached

					source = DBContext.Accounts.Find(sourceId)
					target = DBContext.Accounts.Find(targetId)
				end
				endtry
			end
		endmethod

	endclass

endnamespace