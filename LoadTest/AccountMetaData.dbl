;;*****************************************************************************
;;
;; Title:       AccountMetaData.dbl
;;
;; Description: Defines meta data associated with a Account model.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import System
import System.Collections.Generic
import System.Text
import Harmony.Core
import Harmony.Core.Converters

namespace LoadTest.Models

    ;;; <summary>
    ;;; Global structure representing a Account record.
    ;;; </summary>
	structure strAccount
		AccountNumber, d6
        Balance, d10.2
    endstructure

    ;;; <summary>
    ;;; Exposes metadata relating to the Account model class.
    ;;; </summary>
    public partial class AccountMetadata extends DataObjectMetadataBase

        ;; Define custom property formatters
        
        ;;; <summary>
        ;;; Constructs an new AccountMetadata object.
        ;;; </summary>
        public method AccountMetadata
        proc
            ;; Define structure name and size
            RPSStructureName = "Account"
            RPSStructureSize = ^size(strAccount)

            ;; Define fields
            AddFieldInfo("AccountNumber", "DECIMAL", 6, 1, 0, false)
            AddFieldInfo("CreditLimit", "IMPLIED", 10, 6, 02, false)

            ;; Define all fields that are associated wity key segments
			AddKeyInfo(0, "AccountNumber")

            ;; Define the composition of access keys

            data AccountNumber_KeyParts = new FieldDataDefinition[1]
            AccountNumber_KeyParts[1] = GetFieldByName("AccountNumber")
            AddFieldInfo("KEY_Account_NUMBER", "COMPOSITE", 0, 0, 0, false, ^null, ^null, AccountNumber_KeyParts)

            ;;If we have an InitializeCustomFields method then call it.
            InitializeCustomFields()

        endmethod

        ;;; <summary>
        ;;; Returns a new Account object containing data from a record and a GRFA.
        ;;; The related data properties (REL_AccountOrders and REL_AccountFavoriteItem) will not be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Account object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
        proc
            mreturn new Account((strAccount)dataArea) { GlobalRFA = grfa }
        endmethod

        ;;; <summary>
        ;;; Returns a new Account object containing data from a record and a GRFA.
        ;;; The related data properties (REL_AccountOrders and REL_AccountFavoriteItem) will be populated.
        ;;; </summary>
        ;;; <param name="dataArea">The record containing the data for the new Account object.</param>
        ;;; <param name="grfa">The GRFA associated with the current state of the data.</param>
        ;;; <param name="joinedObjects">Data to allow the related data properties (REL_AccountOrders and REL_AccountFavoriteItem) to be populated.</param>
        ;;; <returns></returns>
        public override method MakeNew, @DataObjectBase
            required in dataArea, a
            required in grfa, a
            required in joinedObjects, [#]KeyValuePair<String, Object>
        proc
            data newAccount = new Account((strAccount)dataArea) { GlobalRFA = grfa }
            mreturn newAccount

        endmethod

        ;;; <summary>
        ;;; Formats a literal value for a key lookup.
        ;;; </summary>
        ;;; <param name="keyNumber">Key number.</param>
        ;;; <param name="parts">Dictionary containing key segment names and values.</param>
        ;;; <returns></returns>
        public override method FormatKeyLiteral, a
            required in keyNumber, int
            required in parts, @Dictionary<String, Object>
            endparams
            stack record key0
                AccountNumber, D6
            endrecord
            
        proc
            data startPos = 0
            data segValueLength, int
            using keyNumber select
            (0),
            begin
                if((segValueLength=KeyValueHelper(key0.AccountNumber, "AccountNumber", parts))<6)
                    mreturn key0(1:startPos+segValueLength)
                mreturn key0
            end
            endusing

            throw new ApplicationException(String.Format("Invalid key number {0} encountered in AccountMetadata.FormatKeyLiteral",keyNumber))

        endmethod

        ;;;<summary>
        ;;; Provide a partial method to allow for initialization of custom fields.
        ;;;</summary>
        private partial method InitializeCustomFields, void

        endmethod

    endclass

endnamespace
