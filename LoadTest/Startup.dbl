;;*****************************************************************************
;;
;; Title:       Startup.dbl
;;
;; Description: Startup class for an OData / Web API hosting environment
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************
;; 
;; This environment requires the following NuGet packages:
;;
;;    Microsoft.AspNetCore.HttpsPolicy
;;    Microsoft.AspNetCore.Mvc.Core
;;    Microsoft.AspNetCore.OData
;;    Microsoft.AspNetCore.StaticFiles
;;    Microsoft.EntityFrameworkCore
;;    Microsoft.OData.Core
;;    Microsoft.OData.Edm
;;    Microsoft.Spatial
;;    Swashbuckle.AspNetCore
;;    system.text.encoding.codepages
;;

import System.Collections.Generic
import Harmony.Core.Context
import Harmony.Core.FileIO
import Harmony.Core.Utility
import Harmony.OData
import Harmony.OData.Adapter
import Harmony.AspNetCore
import Harmony.AspNetCore.Context
import Microsoft.AspNetCore.Builder
import Microsoft.AspNetCore.Hosting
import Microsoft.AspNetCore.Http
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Extensions
import Microsoft.AspNet.OData.Builder
import Microsoft.AspNet.OData.Routing
import Microsoft.AspNet.OData.Routing.Conventions
import Microsoft.EntityFrameworkCore
import Microsoft.Extensions.DependencyInjection
import Microsoft.Extensions.Logging
import Microsoft.OData
import Microsoft.OData.Edm
import Microsoft.OData.UriParser
import Swashbuckle.AspNetCore.Swagger
import Microsoft.AspNetCore.StaticFiles
import LoadTest.Controllers
import LoadTest.Models

namespace LoadTest

    public partial class Startup

        public method ConfigureServices, void
            services, @IServiceCollection 
        proc
            ;;-------------------------------------------------------
            ;;Enable logging

            services.AddLogging(lambda(builder) { builder.SetMinimumLevel(LogLevel.Error) })

            ;;-------------------------------------------------------
            ;;Load Harmony Core

            lambda AddDataObjectMappings(serviceProvider)
            begin
                data objectProvider = new DataObjectProvider(serviceProvider.GetService<IFileChannelManager>())
                objectProvider.AddDataObjectMapping<Account>("c:\wrk\accounts.ism", FileOpenMode.UpdateIndexed)
                mreturn objectProvider
            end

            services.AddSingleton<IEdmBuilder, EdmBuilder>()
            services.AddSingleton<IFileChannelManager, FileChannelManager>()
            services.AddSingleton<IDataObjectProvider>(AddDataObjectMappings)
            services.AddDbContextPool<LoadTest.Models.DBContext>(ConfigureDBContext)

            ;;-------------------------------------------------------
            ;;Load OData and ASP.NET

            lambda AddAltKeySupport(serviceProvider)
            begin
                data model = EdmBuilder.GetEdmModel(serviceProvider)
                mreturn new UnqualifiedAltKeyUriResolver(model) { EnableCaseInsensitive = true }
            end

            services.AddSingleton<ODataUriResolver>(AddAltKeySupport)

            services.AddOData()

            ;;-------------------------------------------------------
            ;;Load our workaround for the fact that OData alternate key support is messed up right now!

            services.AddSingleton<IPerRouteContainer, HarmonyPerRouteContainer>()

            services.AddSwaggerGen()

            data mvcBuilder = services.AddMvcCore()
            &    .AddDataAnnotations()      ;;Enable data annotations
            &    .AddJsonFormatters()       ;;For PATCH
            &    .AddApiExplorer()          ;;Swagger UI

            ;;-------------------------------------------------------
            ;;Enable HTTP redirection to HTTPS

            lambda httpsConfig(options)
            begin
                options.RedirectStatusCode = StatusCodes.Status307TemporaryRedirect
                options.HttpsPort = 8086
            end

            services.AddHttpsRedirection(httpsConfig)

            ;;If there is a ConfigureServicesCustom method, call it
            ConfigureServicesCustom(services)

        endmethod

        private method ConfigureDBContext, void
            required in sp, @IServiceProvider
            required in opts, @DbContextOptionsBuilder
        proc
            HarmonyDbContextOptionsExtensions.UseHarmonyDatabase(opts, sp.GetService<IDataObjectProvider>())
        endmethod

        public method Configure, void
            required in app, @IApplicationBuilder
            required in env, @IHostingEnvironment
        proc
            ;;-------------------------------------------------------
            ;;Configure development and production specific components

            if (env.IsDevelopment()) then
            begin
                data loggerFactory = app.ApplicationServices.GetRequiredService<ILoggerFactory>()
                app.UseDeveloperExceptionPage()
                DebugLogSession.Logging = new AspNetCoreDebugLogger(loggerFactory.CreateLogger("HarmonyCore")) { Level = Harmony.Core.Interface.LogLevel.Debug }
                app.UseLogging(DebugLogSession.Logging)
            end
            else
            begin
                ;;Enable HTTP Strict Transport Security Protocol (HSTS)
                ;
                ;You need to research this and know what you are doing with this. Here's a starting point:
                ;https://docs.microsoft.com/en-us/aspnet/core/security/enforcing-ssl?view=aspnetcore-2.1&tabs=visual-studio
                ;
                ;app.UseHsts()
            end

            ;;-------------------------------------------------------
            ;;Enable HTTP redirection to HTTPS

            app.UseHttpsRedirection()

            ;;-------------------------------------------------------
            ;;Configure the MVC & OData environments

            lambda mvcBuilder(builder)
            begin
                data model = EdmBuilder.GetEdmModel(app.ApplicationServices)

                lambda UriResolver(s)
                begin
                    data result = app.ApplicationServices.GetRequiredService<ODataUriResolver>()
                    mreturn result
                end

                lambda EnableRouting(sp)
                begin
                    ;;Enable optional OData features

                    ;;Enable $select expressions to select properties returned
                    builder.Select()

                    ;;Enable $filter expressions to filter rows returned
                    builder.Filter()

                    ;;Enable $orderby expressions to custom sort results
                    builder.OrderBy()

                    ;;Enable /$count endpoints
                    builder.Count()

                    ;;Enable $expand expressions to expand relations
                    builder.Expand()

                    ;;Specify the maximum rows that may be returned by $top expressions
                    builder.MaxTop(100)

                    data routeList = ODataRoutingConventions.CreateDefaultWithAttributeRouting("odata", builder)
                    routeList.Insert(0, new HarmonySprocRoutingConvention())
                    routeList.Insert(0, new AdapterRoutingConvention())
                    mreturn routeList
                end

                lambda EnableWritableEdmModel(sp)
                begin
                    mreturn new RefEdmModel() { RealModel = EdmBuilder.GetEdmModel(sp) } 
                end

                lambda EnableDI(containerBuilder)
                begin
                    containerBuilder.AddService<Microsoft.OData.UriParser.ODataUriResolver>( Microsoft.OData.ServiceLifetime.Singleton, UriResolver)
                    nop
                end

                lambda ConfigureRoute(containerBuilder)
                begin
                    containerBuilder.AddService<IEdmModel>(Microsoft.OData.ServiceLifetime.Scoped, EnableWritableEdmModel)
                    containerBuilder.AddService<IEnumerable<IODataRoutingConvention>>(Microsoft.OData.ServiceLifetime.Singleton, EnableRouting)
                end

                ;;Enable support for dependency injection into controllers
                builder.EnableDependencyInjection(EnableDI)
                
                ;;Configure the default OData route
                builder.MapODataServiceRoute("odata", "odata", ConfigureRoute)
            end

            ;;-------------------------------------------------------
            ;;Enable MVC

            app.UseMvc(mvcBuilder)

            ;;-------------------------------------------------------
            ;;Configure the web server environment

            ;;Support default files (index.html, etc.)
            app.UseDefaultFiles()

            ;;Add a media type for YAML files
            data provider = new FileExtensionContentTypeProvider()
            provider.Mappings[".yaml"] = "text/yaml"
            data sfoptions = new StaticFileOptions()
            sfoptions.ContentTypeProvider = provider

            ;;Support serving static files
            app.UseStaticFiles(sfoptions)

            ;;-------------------------------------------------------
            ;;Configure and enable SwaggerUI

            lambda configureSwaggerUi(config)
            begin
                config.SwaggerEndpoint("/SwaggerFile.yaml", "Harmony Core Sample API")
                config.RoutePrefix = "api-docs"
                config.DocumentTitle = "Harmony Core Sample API"
            end

            app.UseSwagger()
            app.UseSwaggerUI(configureSwaggerUi)

            ;;If there is a ConfigureCustom method, call it
            ConfigureCustom(app,env)

        endmethod

        ;;Declare the ConfigueServicesCustom partial method
        ;;This method can be implemented in a partial class to provide custom services configuration code
        partial method ConfigureServicesCustom, void
            services, @IServiceCollection 
        endmethod

        ;;Declare the ConfigueCustom partial method
        ;;This method can be implemented in a partial class to provide custom configuration code
        partial method ConfigureCustom, void
            required in app, @IApplicationBuilder
            required in env, @IHostingEnvironment
        endmethod

    endclass

endnamespace
